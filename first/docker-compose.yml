#
# docker-compose.yml
#
# For:
#   - manual deployment
#   - getting the access values to 'firebase.${ENV-staging}.js'
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
name: 8788e9af
services:
  firebase-cli:
    build:
      context: ../dc/firebase-tools/
      target: firebase-cli
      args:
        - FIREBASE_TOOLS_VERSION=11.15.0

  # Let the user authenticate (via a host-side browser session) and select the right Firebase deployment project.
  #
  # Note:
  #   This needs to be 'run' (not started as a service): Firebase needs an interactive terminal for project selection.
  #
  # Once authenticated, the auth information is stored in: 
  #   '.state/configstore/firebase-tools.json'
  #
  # 'firebase use --add' demands to have a 'firebase.json' (a dummy will do) and creates '.firebaserc' in the
  # current folder.
  #
  deploy-auth:
    extends:
      service: firebase-cli
    ports:
      - "9005:9005"   # needed by the auth dance
    volumes:
      #-- Output
      #
      # Firebase CLI saves the login information in '/root/.config/configstore/firebase-tools.json'.
      # It also creates '/root/.config/configstore/update-notifier-firebase-tools.json'.
      #
      - ./.state/configstore:/root/.config/configstore:rw
      - ./.state/.captured.sdkconfig:/work/.captured:delegated
      - ./.state/.firebaserc:/work/.firebaserc:delegated

    working_dir: /work
    command: sh -c '
      echo "{}" > firebase.json &&
      firebase login &&

      firebase use --add &&
      ((firebase apps:sdkconfig > .captured) ||
        (cat >&2 .captured && false)
      )
      '
        # Note: The above acrobatics ('|| (cat ...)') is needed to bring Firebase CLI's error message (11.0.1) to
        #     the developer's terminal. It writes errors to 'stdout'.
        #
        #     Note 2: In https://github.com/firebase/firebase-tools/issues/3227 @samstern writes:
        #             "Without [the '--json'] flag the CLI output is not part of our API and you can change it at will, parsing it is not something we explicitly guarantee."

    profiles: ['manual']

  # Usage:
  #   <<
  #     $ docker compose run --rm deploy-backend
  #   <<
  #
  deploy-backend:
    extends:
      service: firebase-cli
    volumes:
      #-- RO
      - ../packages/backend/firestore.indexes.json:/work/firestore.indexes.json:ro
      - ../packages/backend/firestore.rules:/work/firestore.rules:ro
      - ../packages/backend/database.rules.app.json:/work/database.rules.app.json:ro
      - ../packages/backend/tmp/firebase.app.prod.json:/work/firebase.json:ro
      - ../packages/backend/functions:/work/functions:ro
      #-- other
      - ./.state/.firebaserc:/work/.firebaserc:ro
      # Note: 'configstore' needs to be writable for 'firebase deploy' to not hick up (though no changes are anticipated).
      - ./.state/configstore:/root/.config/configstore:rw

      #-- debugging help
      # In case things go: "Error: An unexpected error has occurred."   (so verbose!)
      #
      #   1st: Check online (Firebase Console > 'Functions'), whether any of the functions are in a bad state (red).
      #       If so, remove and retry.
      #
      #   2nd: If the above doesn't help, enable the line below to get into the contents.
      #
      # NOTE! Enabling this line causes an ERROR at the end of the deployment (Firebase CLI 11.15.0):
      #   <<
      #     Error: EBUSY: resource busy or locked, unlink '/work/firebase-debug.log'
      #   <<
      #   Nothing to be done about it. If some later CLI were to work fine with Docker Compose mapping, we can keep
      #   the line enabled.
      #
      #- ./tmp/firebase-debug.log:/work/firebase-debug.log:delegated

      # WORK_AROUND for the above:
      #
      # Map the same file, but append 'firebase-debug.log' to it only *outside* the 'firebase deploy' (whether it succeeded
      # or not).
      #
      #|- ./tmp/firebase-debug.log:/work/firebase-debug.host.log:delegated

    working_dir: /work
    command: sh -c '
      firebase deploy --only functions,firestore,database
      '
    #|# Note: Could have used 'trap' for this, but that takes some studying, on Busybox/Alpine sh. It's essentially
    #|#     a work-around, so not worth it.
    #|command: sh -c '
    #|  (firebase deploy --only functions,firestore,database || (cat firebase-debug.log >> firebase-debug.host.log; false)) &&
    #|  ([ -f firebase-debug.log ] && cat firebase-debug.log >> firebase-debug.host.log)
    #|  '
    profiles: ['manual']


  # Usage:
  #   <<
  #     $ docker compose run --rm deploy-app
  #   <<
  #
  # Context:
  #   - the app has been recently built (only 'dist' contents are deployed)
  #
  deploy-app:
    extends:
      service: firebase-cli
    volumes:
      #-- RO
      - ../packages/app/dist:/work/dist:ro
      - ./tmp/firebase.hosting.json:/work/firebase.hosting.json:ro
      #
      # Note: 'configstore' needs to be writable for 'firebase deploy' to not hick up.
      - ./.state/configstore:/root/.config/configstore:rw
      - ./.state/.firebaserc:/work/.firebaserc:ro
    working_dir: /work
    command: sh -c '
      firebase --config firebase.hosting.json deploy --only hosting
      '
    profiles: ['manual']
