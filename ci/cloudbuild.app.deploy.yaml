#
# ci/cloudbuild.app.deploy.yaml
#
# Triggers:
#   - new stuff is merged to a branch ('$BRANCH_NAME'); changes either in 'packages/app/**' or root 'package.json'.
#
# Cloud Build project:
#   Production/staging GCP project (deploys to itself).
#
# Responsibility:
#   - build and deploy front-end
#
# Uses images:
#   - node:{16|18}-alpine (stock image)
#   - firebase-emulators  (pushed to Artifact Registry)   contains Firebase CLI we use for deployment
#   - git                 (Cloud Build built-in image)
#   - gsutil              (Cloud Build built-in image)
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables (just some):
#     PWD=/workspace
#     HOME=/builder/home
#
# Manual triggering:
#   - Provide an SHA of a tested commit by '--substitutions=_TESTED_SHA=...'.
#
# References:
#   - Cloud Build > Substituting variable values
#     https://cloud.google.com/build/docs/configuring-builds/substitute-variable-values
#
steps:
# Flight check
#
# - Using '${SHORT_SHA}' as an indicator, whether we are manually triggerred (empty) or in production CI (has stuff).
#
- name: gcr.io/cloud-builders/git
  entrypoint: sh
  args: ['-c', '
    [ $PROJECT_ID != ${_MY_BUILDER} ] || ( >&2 echo "ERROR: Please change to the deployment project: gcloud config set project <project-id>"; false ) &&

    if [ -z ${SHORT_SHA} ]; then
      [ ! -z ${_TESTED_SHA} ] || 
        ( >&2 echo "ERROR: For manual runs, please provide an sha of a commit that has passed the tests. ''--substitutions=_TESTED_SHA=...''"; false ) &&

      >&2 echo "** MANUAL TRIGGER **" &&
      echo ${_TESTED_SHA} > .TESTED_SHA
    ; else
      git fetch --depth=2 &&
      git rev-parse --short HEAD~1 > .TESTED_SHA
    ; fi
  ']

- name: gcr.io/cloud-builders/gsutil
  entrypoint: sh
  args: ['-c', '
    export TESTED_SHA=$$( cat .TESTED_SHA ) &&    

    gsutil cat ${_GS_TOUCH_PATH}/$${TESTED_SHA} ||
      ( >&2 echo "ERROR: No evidence that tests would have passed. ''${_GS_TOUCH_PATH}/$${TESTED_SHA}'' does not exist"; false )
  ']

# Install
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    npm config set update-notifier false &&
    apk add --update make &&

    npm install &&
    npm --prefix packages/app install --omit=optional --omit=peer
  ']

  # State:
  #   - packages/app/firebase.json    has the deployment configuration (based on 'firebase.hosting.js')

# Sign in to Firebase; capture the "access values"
#
- name: $_1
  entrypoint: sh
  args: ['-c', '
    apk add jq &&
    firebase use $PROJECT_ID && 

    firebase --json apps:sdkconfig | jq .result.sdkConfig > firebase.config.json
  ']
  dir: packages/app

  # State:
  #   - packages/app/firebase.config.json   has the Firebase server "access values", to be baked into the client

# Build
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.prod.build.ci.yml', 'run', 'build']
  dir: packages/app
  env:
    - RELEASE=${SHORT_SHA:-0}
    - FIREBASE_CONFIG_JSON=firebase.config.json

# DEPLOY
#
- name: $_1
  entrypoint: sh
  args: ['-c', '
    firebase deploy --only hosting
  ']
  dir: packages/app

# --- Timeout
#
# Cloud Build:  1:42, 1:30, 1:38
#
timeout: 200s

# Note: Substitutions don't seem to get parsed recursively (would like to use '$_BUILDER_TAG' to define the image)
#
substitutions:
  _1: us-central1-docker.pkg.dev/ci-builder/builders/firebase-emulators:11.16.0
  _DOCKER_COMPOSE_TAG: 1.29.2
  _NODE_VER: "18"
  _GS_TOUCH_PATH: gs://ci-builder_cloudbuild/.passed.app    # where successful tests are marked
  _MY_BUILDER: ci-builder
  _TESTED_SHA: ""

#disabled; keep for now
## Anything baked into the front end are not really hard secrets, but let's treat them as such.
#availableSecrets:
#  secretManager:
#    - versionName: projects/$PROJECT_ID/secrets/<SECRET_NAME>/versions/latest
#      env: 'SECRET_NAME'
