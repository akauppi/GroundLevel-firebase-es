#
# ci/cloudbuild.backend.yaml
#
# Triggers:
#   - PR is made or changed; changes affect 'packages/backend' (or '/package.json')
#
# Cloud Build project:
#   - Common CI builder (not project specific; no deploys!)
#
# Uses images:
#   - node:{16|18}-alpine (stock image)
#   - firebase-emulators  (pushed to Artifact Registry)
#   - docker/compose      (stock image)
#   - gsutil              (Cloud Build built-in image)
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables:
#     PWD=/workspace
#     HOME=/builder/home
#     BUILDER_OUTPUT=/builder/outputs
#
# Note:
#   Using 'node:16' to run 'npm install' means that the packages are installed as root, and 'node_modules' is read-only
#   to regular users (of other images). This is normally not a concern.
#
#   tbd. Check whether the above holds also for 'node:18'. Does the above still hold? #contribute
#

steps:
# Install
#
- name: node:${_NODE_VER}-alpine  # 48.8 MB (node:18-alpine) | 38.9 MB (node:16-alpine)
  entrypoint: sh
  args: ['-c', '
    [ ! -z ${SHORT_SHA} ] || ( >&2 echo "!: No ''SHORT_SHA'' detected (this is a manual run). A successful run will NOT open doors to deployment." ) &&
    [ $PROJECT_ID == ${_MY_BUILDER} ] || ( >&2 echo "ERROR: Please change to the ''${_MY_BUILDER}'' project: gcloud config set project ${_MY_BUILDER}"; false ) &&

    npm config set update-notifier false &&

    npm install &&
    npm --prefix packages/backend install &&

    (cd packages/backend && 
      ln -s tmp/firebase.ci.json ./firebase.json &&
      touch firebase-debug.log firestore-debug.log database-debug.log
    )
  ']
  env:
    - FIRESTORE_PORT=6767
    - FUNCTIONS_PORT=5002
      # The port values get baked into 'firebase.json' (tbd. ..and should become the only place we need to set them in)

  # State:
  #   - packages/backend/functions/node_modules   have been populated
  #   - packages/backend/tmp/firebase.ci.json     has been created
  #   - packages/backend/tmp/database.rules.json  has been created (just used for metrics/logging)
  #   - packages/backend/firebase.json            alias for easy running of tests
  #   - packages/backend/{firebase|firestore|database}-debug.log      created, so DC can map them

# DEBUG:
#
# USE THIS TO DEBUG CASES where the emulators don't start (or to see warm-up timings).
#
# Note: 'docker compose up' never returns, so if this is enabled, it's eventually a timeout.
#
#|- name: docker/compose:${_DOCKER_COMPOSE_TAG}
#|  args: ['-f', 'docker-compose.ci.yml', 'up', 'emul']
#|  #args: ['-f', 'docker-compose.ci.yml', 'run', 'emul-is-up']
#|  dir: packages/backend
#|  env:
#|    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}
#|    - FIRESTORE_PORT=6767
#|    - FUNCTIONS_PORT=5002

# --- --- --- üì£‚ö†Ô∏èü™§üö®
# WARNING!!!
#
#   If there is a problem with Cloud Functions, INSTEAD OF EXITING, THE EMULATORS KEEP RUNNING!! This is NOT
#   ideal for developers, because it gives the feeling things would be right. INSTEAD, FIREBASE EMULATORS SHOULD FAIL
#   if there is a major problem like Cloud Functions cannot be started. **PLEASE PUT PRESSURE ON FIREBASE TO CHANGE
#   THIS BEHAVIOUR if you agree with it.** Saves all of our time. Thank You.
#
#   ^-- Above applies only to the case where there would be failures INITIALLY, when the emulators are loaded.
#       In this case, I think emulators should refuse to launch. The emulators also have hot-reload capabilities
#       for functions and Rules, and for this use case, it's vital that they keep running.
#
# --- --- --- üì£‚ö†Ô∏èü™§üö®

# Launch emul in DC, keeps them running in the background.
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.ci.yml', 'run', 'emul-is-healthy']
  dir: packages/backend
  env:
    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}
    - FIRESTORE_PORT=6767
    - FUNCTIONS_PORT=5002

# Observed test times:
#
# |              | time
# | ------------ | -----
# | fns (cold)   | 2894, 3306, 2946 ms
# | fns (warm)   | 422, 577 ms
# | rules (cold) | 631, 705 ms    (already < 2000ms = good)
#
# Conclusion: warm-up affects 'fns' tests, but whether we want to run them in CI is a matter of choice.
#   Doing so allows to check that actual tests (when warmed up) do execute within 2000ms.
#   On the other side, it delays the overall CI runs a bit.
#
  # Note: If you disable the warm-up (reduces CI execution times by <not measured>), then enable 'WARM_UP_TIMEOUT' for
  #       the actual tests.
  #
- name: node:18-alpine
  entrypoint: npm
  args: ['run', 'ci:warm-up']
  dir: packages/backend
  env:
    - EMUL_HOST=emul
    - WARM_UP_TIMEOUT=8000

- name: node:18-alpine
  entrypoint: npm
  args: ['run', 'ci:test']
  dir: packages/backend
  env:
    - EMUL_HOST=emul
    #- WARM_UP_TIMEOUT=8000

- name: node:${_NODE_VER}-alpine
  entrypoint: npm
  args: ['run', 'lint']
  dir: packages/backend

#-- Pass marker
#
- name: gcr.io/cloud-builders/gsutil
  entrypoint: sh
  args: ['-c', '
    if [ -z ${SHORT_SHA} ]; then
      ( >&2 echo "Pass NOT MARKED to Cloud Storage since no ''SHORT_SHA'' (manual run)." )
    ; else
      touch _
        && gsutil cp file://_ ${_GS_TOUCH_PATH}/${SHORT_SHA}
    ; fi
  ']

# --- Timeout
#
# Cloud Build:
#   - warm-up of functions (default CPU):   2:06, 1:43, 1:54, 1:50, 2:11, 2:04
#
# Note: Using '--machine-type=n1-highcpu-8' speeds up the runs by ~-30%:  1:28
#
timeout: 300s

substitutions:
  _BUILDER_TAG: 11.3.0
  _DOCKER_COMPOSE_TAG: 1.29.2
  _NODE_VER: "18"
  _AR_FOLDER: builders
    # You may use any name, or create such a folder in AR.
  _GS_TOUCH_PATH: gs://ci-builder_cloudbuild/.passed.backend    # where successful tests are marked
  _MY_BUILDER: ci-builder
