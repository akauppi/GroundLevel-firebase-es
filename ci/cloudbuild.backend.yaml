#
# ci/cloudbuild.backend.yaml
#
# Triggers:
#   - PR is made or changed; changes affect 'packages/backend' (or '/package.json', or 'tools/**')
#
# Cloud Build project:
#   - Common CI builder (not project specific; no deploys!)
#
# Uses images:
#   - node:16
#   - firebase-ci-builder   (pushed to Container Registry)
#   - docker/compose
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables (just some):
#     PWD=/workspace
#     HOME=/builder/home
#
# Note:
#   Using 'node:16' to run 'npm install' means that the packages are installed as root, and 'node_modules' is read-only
#   to regular users (of other images). This is normally not a concern.
#

steps:
# DEBUG
#|- name: node:16
#|  entrypoint: sh
#|  args: ['-c', 'pwd && ls -al']
#|  dir: packages/backend
#|- name: docker
#|  args: ['run',
#|         '-v', '/workspace/packages/backend:/work', '-w', '/work',
#|         '--entrypoint', '/bin/sh',
#|         'node:16', '-c', 'pwd && ls -al && false']
#/DEBUG

# Root install
#
- name: node:16
  entrypoint: npm
  args: ['install']

# Backend
#
- name: node:16
  entrypoint: npm
  args: ['install']
  dir: packages/backend

# DEBUG:
#
# USE THIS TO DEBUG CASES where the emulators don't start. Easier to see the console output.
#
#- name: gcr.io/${PROJECT_ID}/firebase-ci-builder:${_BUILDER_TAG}
#  entrypoint: firebase
#  args: ['emulators:start', '--project=demo-2']
#  dir: packages/backend

# --- --- --- üì£‚ö†Ô∏èü™§üö®
# WARNING!!!
#
#   If you have a problem with - say - Cloud Functions, INSTEAD OF EXITING, THE EMULATORS KEEP RUNNING!! This is NOT
#   ideal for developers, because it gives the feeling things might be right. INSTEAD, FIREBASE EMULATORS SHOULD FAIL
#   if there is a major problem like Cloud Functions cannot be started. **PLEASE PUT PRESSURE ON FIREBASE TO CHANGE
#   THIS BEHAVIOUR if you agree with it.** Saves all of our time. Thank You.
#
#   Addition / correction: Above applies only to the case where there would be failures initially, when the emulators are
#     loaded. In this case, I think emulators should refuse to launch. The emulators also have hot-reload capabilities
#     for functions and Rules, and for this use case, it's vital that they keep running.
#
# --- --- --- üì£‚ö†Ô∏èü™§üö®

# Launch emul/warm-up in DC, keeps them running in the background (Docker network 'workspace_default').
#
# NOTE:
#   - The 'up', '-d' pattern is used in online samples (eg. [1]), but is it valid in 2021? Does Cloud Build let
#     an earlier step run, if placed on the background?
#   - Below, 'npm run ci:test' remains waiting for port 6768. It doesn't seem to get it, from the DC. (study later, if we want to try it?)
#
#   [1]: https://github.com/Philmod/gcb-docker-compose/blob/master/cloudbuild.yaml
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['run', 'warmed-up']
  dir: packages/backend
  env:
    - CI_BUILDER_IMAGE=gcr.io/${PROJECT_ID}/firebase-ci-builder:${_BUILDER_TAG}
    - NODE=16

  # Note: Calls reaching the emul need to be wrapped in 'docker run', in order to reach the DC network.
  #
- name: docker
  args: ['run',
         '--network', 'backend_default',
         '-v', '/workspace/packages/backend:/work',
         '-w', '/work',
         '-e', 'EMUL_HOST=emul',      # name of the host in DC
         '--entrypoint', 'npm',
         'node:16', 'run', 'ci:test']

  # Instead of:
  #- name: node:16
  #  entrypoint: npm
  #  args: ['run', 'ci:test']
  #  dir: packages/backend

- name: node:16
  entrypoint: npm
  args: ['run', 'lint']
  dir: packages/backend

# --- Timeout
#
# Cloud Build
#   - native, no lint:          1:51, 1:45  # (old results)
#   - DC/Docker, with lint:     3:13
#
timeout: 300s

substitutions:
  _BUILDER_TAG: 9.17.0-node16-npm7
  _DOCKER_COMPOSE_TAG: 1.29.2
