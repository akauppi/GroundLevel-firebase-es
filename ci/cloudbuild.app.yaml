#
# ci/cloudbuild.app.yaml
#
# Trigger:
#   - PR is made or changed; changes affect 'packages/app' (or '/package.json')
#
# Cloud Build project:
#   - Common CI builder (not project specific; no deploys!)
#
# Uses images:
#   - node:{16|18}-alpine   (stock image)
#   - firebase-emulators    (pushed to Artifact Registry)
#   - docker/compose        (stock image)
#   - gsutil                (Cloud Build built-in image)
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables:
#     PWD=/workspace
#     HOME=/builder/home
#     BUILDER_OUTPUT=/builder/outputs
#
# Note:
#   Using 'node:16' to run 'npm install' means that the packages are installed as root, and 'node_modules' is read-only
#   to regular users (of other images). This is normally not a concern.

steps:
# Install
#
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    [ ! -z ${SHORT_SHA} ] || ( >&2 echo "!: No ''SHORT_SHA'' detected (this is a manual run). A successful run will NOT open doors to deployment." ) &&
    [ $PROJECT_ID == ${_MY_BUILDER} ] || ( >&2 echo "ERROR: Please change to the ''${_MY_BUILDER}'' project: gcloud config set project ${_MY_BUILDER}"; false ) &&

    apk add --update make &&
    npm config set update-notifier false &&

    npm install &&
    npm --prefix packages/backend install &&
    npm --prefix packages/backend/functions install &&
    npm --prefix packages/app install --omit=optional &&

    (cd packages/app && make tmp/.env.ci_test)
  ']
  env:
    - EMUL_HOST=emul-for-app
    - CI_APP=true

  # State:
  #   - packages/backend/functions/node_modules   have been populated
  #   - packages/backend/tmp/firebase.ci.json     has been created
  #   - packages/backend/{firebase|firestore|database}-debug.log      created, so DC can map them
  #   - packages/app/tmp/.env.ci_test             has been created
  #
  #     Note: Ports are in two places: 'tmp/firebase.ci.json' for the emulators; '.env.ci_test' for Vite.

# DEBUG, TERMINAL:
#
# USE THIS TO DEBUG CASES where the emulators don't start.
#
# Note: 'docker compose up' never returns, so if this is enabled, it's eventually a timeout.
#
#|- name: docker/compose:${_DOCKER_COMPOSE_TAG}
#|  args: ['-f', 'docker-compose.app.ci.yml', 'up', 'emul-for-app']
#|  dir: packages/backend
#|  env:
#|    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}

# --- App
#
# Launch emulators and Vite; keeps them running in the background.
#
# Note: No priming of data & users is needed (that's for "dev", we only do "npm test").
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.app.ci.yml', 'run', 'emul-for-app-launched']
  dir: packages/backend
  env:
    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}

  # DEBUG: Check we see stuff
  #
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    nc -z $$EMUL_HOST 6767 && echo "I see $$EMUL_HOST:firestore" &&
    nc -z $$EMUL_HOST 5002 && echo "I see $$EMUL_HOST:functions" &&
    nc -z $$EMUL_HOST 9100 && echo "I see $$EMUL_HOST:auth" &&
    nc -z $$EMUL_HOST 6868 && echo "I see $$EMUL_HOST:database"
  ']
  env:
    - EMUL_HOST=emul-for-app

# DEBUG; TERMINAL. Enable if Vite does not launch
#|- name: docker/compose:${_DOCKER_COMPOSE_TAG}
#|  args: ['-f', 'docker-compose.ci.yml', 'up', 'vite-ci']
#|  dir: packages/app
#|  env:
#|    - PORT=3002

# Launches Vite
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.ci.yml', 'run', 'vite-ci-launched']
  dir: packages/app
  env:
    - PORT=3002

  # State:
  #   - 'emul-for-app' is running (emulators)
  #   - 'vite:3002' is running, and connected to the above backend

# DEBUG: Check we see stuff
#
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    nc -z vite 3002 && echo "I see Vite" &&
    nc -z $$EMUL_HOST 6767 && echo "I see $$EMUL_HOST:firestore" &&
    nc -z $$EMUL_HOST 5002 && echo "I see $$EMUL_HOST:functions" &&
    nc -z $$EMUL_HOST 9100 && echo "I see $$EMUL_HOST:auth" &&
    nc -z $$EMUL_HOST 6868 && echo "I see $$EMUL_HOST:database" &&
    
    cat packages/app/tmp/.env.ci_test
  ']
  env:
    - EMUL_HOST=emul-for-app

  # NOTE!
  #   Below is slightly different than running 'make test' within dev.
  #     - dev uses a '../tools/cypress.dc' custom Cypress image-look-alike;
  #       we want to rely on stock images, as possible
  #
  #       Customizations (from the '../tools/cypress.dc') are done here, so that the 'cypress.config.js' would work.
  #
- name: cypress/included:${_CYPRESS_TAG}
  entrypoint: sh
  args: ['-c', '
    npm config set update-notifier false &&

    npm install -g firebase-admin@$_FIREBASE_ADMIN_VER &&
    ln -s $$NODE_PATH /node_modules &&
    
    cypress run --headless    
  ']
    # By default, globally installed libraries are not resolved by Node.js (in ESM mode). That's what the 'ln -s' is for.
    #
  dir: packages/app
  env:
    - CYPRESS_baseUrl=http://vite:3002
    - CYPRESS_defaultCommandTimeout=20000
    #- CYPRESS_taskTimeout=30000
    - EMUL_HOST=emul-for-app    # so firebase-admin can read the Realtime Database
    #
    # Test durations:
    #   1: 9253, 7429 ms
    #   2:
    #   3:
    #
    # Tests durations (old):
    #   1: 10673, 9478, 9270, 10987 ms
    #   2: na
    #   3:  4224, 4920, 4695,  5276 ms

- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    echo "export default {}" > fake.config.js
  ']
  dir: packages/app

  # State:
  #   - 'fake.config.js' contains a dummy

# Check that a production build passes.
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.tools.ci.yml', 'run', 'build']
  dir: packages/app
  env:
    - RELEASE=
    - FIREBASE_SERVER_CONFIG_JS=./fake.config.js

- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    npm run ci:lint
  ']
  dir: packages/app

#-- Pass marker
#
- name: gcr.io/cloud-builders/gsutil
  entrypoint: sh
  args: ['-c', '
    if [ -z ${SHORT_SHA} ]; then
      ( >&2 echo "Pass NOT MARKED to Cloud Storage since no ''SHORT_SHA'' (manual run)." )
    ; else
      touch _
        && gsutil cp file://_ ${_GS_TOUCH_PATH}/${SHORT_SHA}
    ; fi
  ']

# --- Timeout
#
# Cloud Build: 5:36, 5:10, 6:01, 4:56   <-- last with Cypress 10.6.0
#
timeout: 500s

substitutions:
  _BUILDER_TAG: 11.13.0
  _DOCKER_COMPOSE_TAG: 1.29.2
    # https://hub.docker.com/r/docker/compose/tags?page=1&ordering=last_updated
  _NODE_VER: "18"
  _CYPRESS_TAG: 10.9.0
    # https://hub.docker.com/r/cypress/included/tags?page=1&ordering=last_updated
  _AR_FOLDER: builders
  _GS_TOUCH_PATH: gs://ci-builder_cloudbuild/.passed.app    # where successful tests are marked
  _MY_BUILDER: ci-builder
  _FIREBASE_ADMIN_VER: 11.0.1
