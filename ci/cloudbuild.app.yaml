#
# ci/cloudbuild.app.yaml
#
# Trigger:
#   - PR is made or changed; changes affect 'packages/app' (or '/package.json')
#
# Cloud Build project:
#   - Common CI builder (not project specific; no deploys!)
#
# Uses images:
#   - node:{16|18}-alpine   (stock image)
#   - firebase-emulators    (pushed to Artifact Registry)
#   - docker/compose        (stock image)
#   - cypress/included      (stock image)
#   - gsutil                (Cloud Build built-in image)
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables:
#     PWD=/workspace
#     HOME=/builder/home
#     BUILDER_OUTPUT=/builder/outputs
#
# Note:
#   Using 'node:16' to run 'npm install' means that the packages are installed as root, and 'node_modules' is read-only
#   to regular users (of other images). This is normally not a concern.

steps:
# Install
#
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    [ ! -z ${SHORT_SHA} ] || ( >&2 echo "!: No ''SHORT_SHA'' detected (this is a manual run). A successful run will NOT open doors to deployment." ) &&
    [ $PROJECT_ID == ${_MY_BUILDER} ] || ( >&2 echo "ERROR: Please change to the ''${_MY_BUILDER}'' project: gcloud config set project ${_MY_BUILDER}"; false ) &&

    apk add --update make &&
    npm config set update-notifier false &&

    npm install &&
    npm --prefix packages/backend install &&
    npm --prefix packages/app install --omit=optional --omit=peer &&

    (cd packages/app && 
      make tmp/.env.ci_test tmp/firebase.app.ci.js &&
      node --input-type=module -e "import o from ''./tmp/firebase.app.ci.js''; console.log(JSON.stringify(o));" > tmp/firebase.app.ci.json
    )
  ']

  # State:
  #   - packages/backend/functions/node_modules   have been populated
  #   - packages/backend/{firebase|firestore|database}-debug.log      created, so DC can map them
  #   - packages/app/tmp/.env.ci_test             has been created
  #   - packages/app/tmp/firebase.app.ci.js[on]   have been created   (JSON only used by Firebase emulators)
  #
  #     Note: Ports are in three places: 'tmp/firebase.ci.js' for Cypress, 'tmp/firebase.ci.json' for Firebase Emulators,
  #           and 'tmp/.env.ci_test' for the front-end.

# DEBUG, TERMINAL:
#
# USE THIS TO DEBUG CASES where the emulators don't start.
#
# Note: 'docker compose up' never returns, so if this is enabled, it's eventually a timeout.
#
#|- name: docker/compose:${_DOCKER_COMPOSE_TAG}
#|  args: ['-f', 'docker-compose.app.ci.yml', 'up', 'emul-for-app']
#|  dir: packages/backend
#|  env:
#|    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}


# --- Tests

# Launch emulators; keep them running in the background.
#
# Note: No priming of data & users is needed (that's for "dev", we only do "npm test").
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.app.ci.yml', 'run', 'emul-for-app-launched']
  dir: packages/backend
  env:
    - CI_BUILDER_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/firebase-emulators:${_BUILDER_TAG}

  # DEBUG: Check we see stuff
  #
#|- name: node:${_NODE_VER}-alpine
#|  entrypoint: sh
#|  args: ['-c', '
#|    echo "--- firebase-debug.log" && cat packages/backend/firebase-debug.log &&
#|    echo "--- database-debug.log" && cat packages/backend/database-debug.log &&
#|
#|    nc -z $$EMUL_HOST 6767 && echo "I see $$EMUL_HOST:firestore" &&
#|    nc -z $$EMUL_HOST 5002 && echo "I see $$EMUL_HOST:functions" &&
#|    nc -z $$EMUL_HOST 9100 && echo "I see $$EMUL_HOST:auth" &&
#|    nc -z $$EMUL_HOST 6868 && echo "I see $$EMUL_HOST:database"
#|  ']
#|  env:
#|    - EMUL_HOST=emul-for-app

  # DEBUG, TERMINAL: enable to see Vite launches
  #
  # 'vite-ci' is normally just a dependency of 'cypress', but this launches it on its own (and shows console output):
  #
#|- name: docker/compose:${_DOCKER_COMPOSE_TAG}
#|  args: ['-f', 'docker-compose.ci.yml', 'up', 'vite-ci']
#|  dir: packages/app
#|  env:
#|    - VITE_PORT=3002

# Launch Vite (optional; provides better debugging and earlier fail, having this as a separate step).
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'dc.cypress.ci.yml', 'run', 'vite-dev-ci-launched']
  dir: packages/app
  env:
    - VITE_PORT=3002

  # DEBUG: Check we see Vite and Realtime Database
  #
#|- name: node:${_NODE_VER}-alpine
#|  entrypoint: sh
#|  args: ['-c', '
#|    apk add --update curl &&
#|    nc -z vite 3002 && echo "I see Vite" &&
#|    nc -z emul-for-app 6868 && echo "I see Realtime Database"
#|  ']

# Running Cypress
#
# This automatically launches 'vite-ci', unless it's already done, above.
#
# Running via DC (opposed to directly using a Cypress image) so that we can:
#   - integrate launching Vite and running Cypress
#   - do file mapping/sandboxing
#   - handle networks correctly (differs from the dev environment)
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'dc.cypress.ci.yml', 'run', 'cypress']
  dir: packages/app
  env:
    - VITE_PORT=3002
      # precise port does not matter; helps us keep it in one place. #rework
    - CYPRESS_IMAGE=us-central1-docker.pkg.dev/${PROJECT_ID}/${_AR_FOLDER}/cypress-custom:${_CYPRESS_TAG}
    - EMUL_HOST=emul-for-app

#--- Build (fake; just trying it does..)
#
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    echo "export default {}" > fake.config.js
  ']
  dir: packages/app

  # State:
  #   - 'fake.config.js' contains a dummy

# Check that a production build passes.
#
- name: docker/compose:${_DOCKER_COMPOSE_TAG}
  args: ['-f', 'docker-compose.tools.ci.yml', 'run', 'build']
  dir: packages/app
  env:
    - RELEASE=
    - FIREBASE_SERVER_CONFIG_JS=./fake.config.js

- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    npm run ci:lint
  ']
  dir: packages/app

#-- Pass marker
#
# NOTE: The 'cloud-builders/gsutil' image is intended to be deprecated by GCP, in favor of 'google/cloud-sdk[:alpine]'
#   See -> https://github.com/GoogleCloudPlatform/cloud-builders/issues/638#issuecomment-625331280
#
#   gcr.io/cloud-builders/gsutil    420 MB
#   google/cloud-sdk:alpine         205 MB    <-- tbd. use this
#
- name: gcr.io/cloud-builders/gsutil
  entrypoint: sh
  args: ['-c', '
    if [ -z ${SHORT_SHA} ]; then
      ( >&2 echo "Pass NOT MARKED to Cloud Storage since no ''SHORT_SHA'' (manual run)." )
    ; else
      touch _
        && gsutil cp file://_ ${_GS_TOUCH_PATH}/${SHORT_SHA}
    ; fi
  ']

# --- Timeout
#
# Cloud Build: 5:46
#   (earlier): 5:36, 5:10, 6:01, 4:56
#
timeout: 600s

substitutions:
  _BUILDER_TAG: 11.14.4
  _DOCKER_COMPOSE_TAG: 1.29.2
    # https://hub.docker.com/r/docker/compose/tags?page=1&ordering=last_updated
  _NODE_VER: "18"
  _CYPRESS_TAG: 10.10.0
    # https://hub.docker.com/r/cypress/included/tags?page=1&ordering=last_updated
  _AR_FOLDER: builders
  #_FIREBASE_ADMIN_VER: 11.1.0
  _GS_TOUCH_PATH: gs://ci-builder_cloudbuild/.passed.app    # where successful tests are marked
  _MY_BUILDER: ci-builder
  #_FIREBASE_EMULATORS: firebase-emulators
  #_CYPRESS_CUSTOM: cypress-custom
