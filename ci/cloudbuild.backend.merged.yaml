#
# ci/cloudbuild.backend.merged.yaml
#
# Triggers:
#   - new stuff is merged to a branch ('$BRANCH_NAME'); changes either in 'packages/backend/**' or root 'package.json'
#
# GCP Project:
#   Production/staging GCP project (deploys to itself).
#
# Responsibility:
#   - deploy backend
#
# Uses images:
#   - node:{16|18}-alpine (stock image)
#   - firebase-emulators  (pushed to Artifact Registry)   contains Firebase CLI we use for deployment
#   - gsutil              (Cloud Build built-in image)
#
# Runtime environment:
#   - Current directory is '/workspace/...', based on the 'dir' field
#
#   - env.variables (just some):
#     PWD=/workspace
#     HOME=/builder/home
#
# References:
#   - Cloud Build > Substituting variable values
#     -> https://cloud.google.com/build/docs/configuring-builds/substitute-variable-values
#
steps:
# Flight check
- name: gcr.io/cloud-builders/gsutil
  entrypoint: sh
  args: ['-c', '
    [ $PROJECT_ID != ${_MY_BUILDER} ] || ( >&2 echo "ERROR: Please change to the deployment project: gcloud config set project <project-id>"; false ) &&
    
    if [ -z ${SHORT_SHA} ]; then
      >&2 echo "ERROR: No ''SHORT_SHA'' detected. If this is a manual run, provide one by ''--substitutions=SHORT_SHA=xxx''."; false
    ; else
      gsutil cat ${_GS_TOUCH_PATH}/${SHORT_SHA} ||
        ( >&2 echo "ERROR: No evidence that tests would have passed. ''${_GS_TOUCH_PATH}/${SHORT_SHA}'' does not exist"; false )
    ; fi
  ']

# Install
- name: node:${_NODE_VER}-alpine
  entrypoint: sh
  args: ['-c', '
    npm config set update-notifier false &&

    npm --prefix ../.. install &&
    npm install &&
    
    ln -s tmp/firebase.ci.json firebase.json &&
    ln -s tmp/database.rules.json .
  ']
  dir: packages/backend
  env:
    - FIRESTORE_PORT=6767
    - FUNCTIONS_PORT=5002

  # State:
  #   - packages/backend/functions                are installed
  #   - packages/backend/tmp/firebase.ci.json     generated
  #   - packages/backend/tmp/database.rules.json  generated
  #   - packages/backend/firebase.json            alias for deployment
  #   - packages/backend/database.rules.json      alias for deployment

# DEPLOY
#
- name: $_1
  entrypoint: sh
  args: ['-c', '
    firebase use $PROJECT_ID &&

    LOCATION_ID=$$(firebase apps:sdkconfig | grep -E ''^\s+"locationId":\s.+,'' | cut -d ''"'' -f4) &&
    [ ! -z $$LOCATION_ID ] || ( >&2 echo "ERROR: No ''locationId'' in Firebase app configuration (needs some tweaks)"; false ) && 
    echo "Using location id: $${LOCATION_ID}" &&
    
    cat functions/regional.js | sed -E "s/import\.meta\.env\.LOCATION_ID/''$${LOCATION_ID}''/" > .a &&
      mv .a functions/regional.js
  ']
  dir: packages/backend
    #
    # Note: The dance of picking up region id, only to inject it into the Cloud Functions source, so that Firebase can
    #   again pick it up just feels wrong. Is this really the way?
    #
    # tbd. Test that it deploys to 'us-central1'.

  # State:
  #   - packages/backend/functions/regional.js    modified so that 'import.meta.env.LOCATION_ID' is replaced by the target region

- name: $_1
  entrypoint: firebase
  args: ['deploy', '--only', 'functions,firestore,database']
  dir: packages/backend

  # DEBUG hint: If not deploying, add '--debug' to the params.

# --- Timeout
#
# Cloud Build: 2:21
#
# OLD: 3:26, 3:04, 3:43
#
timeout: 400s

# Note: Substitutions don't seem to get parsed recursively (would like to use '$_BUILDER_TAG' to define the image)
#
substitutions:
  _1: us-central1-docker.pkg.dev/ci-builder/builders/firebase-emulators:11.3.0
  _NODE_VER: "18"
  _GS_TOUCH_PATH: gs://ci-builder_cloudbuild/.passed.backend    # where successful tests are marked
  _MY_BUILDER: ci-builder
