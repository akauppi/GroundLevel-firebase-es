/*
* Pass metrics from the front end instances to Cloud Monitoring.
*
* References:
*   - Organize Multiple Functions
*     -> https://firebase.google.com/docs/functions/organize-functions
*/
import { MetricServiceClient } from "@google-cloud/monitoring";

const client = new MetricServiceClient();

// Currently, the metrics are passed to the same GCP project as the Firebase Functions are running under.
// This can be changed, however, to aggregate multiple Firebase app's metrics (and logs) into a single project.
//
const PROJECT_ID = process.env["GCLOUD_PROJECT"] || fail("No 'GCLOUD_PROJECT' env.var");

async function writeTimeSeriesData() {

  const dataPoint = {
    interval: {
      endTime: {
        seconds: Date.now() / 1000,
      },
    },
    value: {
      doubleValue: 234.56,
    },
  };

  const timeSeriesData = {
    metric: {
      type: 'custom.googleapis.com/stores/daily_sales',
      labels: {
        store_id: 'Pittsburgh',
      },
    },
    resource: {
      type: 'global',
      labels: {
        project_id: PROJECT_ID,
      },
    },
    points: [dataPoint],
  };

  const request = {
    name: client.projectPath(PROJECT_ID),
    timeSeries: [timeSeriesData],
  };

  // Writes time series data
  const result = await client.createTimeSeries(request);
  console.log('Done writing time series data.', result);
}
writeTimeSeriesData();

//---
function fail(msg) { throw new Error(msg) }
