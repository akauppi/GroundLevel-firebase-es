#
# docker-compose.app.yml
#
# A version of the DC definition for front-end development and testing.
#
# Expects:
#   'FUNCTIONS_PORT'  ! EXPERIMENTAL; still looking which is the best way to pass the port numbers..
#   'COMPOSE_IGNORE_ORPHANS=true'   to mitigate a warning, since we tie to a project ('app') that might have other running services
#
# Note:
#   Ports exposed at the host are defined so that they do not overlap with those of 'docker-compose.yml'.
#   This means backend containers can be left running while doing front-end development.
#
# References:
#   - Share Compose configurations between files and projects (Docker Compose docs)
#     -> https://docs.docker.com/compose/extends/
#
name: app   # allows us to be used from '../app', in the same network
services:
  emul-for-app:
    extends:
      file: dc.base.yml
      service: emul-base
    volumes:
      # --- RO
      - ./tmp/firebase.app.json:/work/firebase.json:ro

      # --- follow
      - ./database.rules.app.json:/work/database.rules.app.json:cached    # can get modified on the host

      # --- output
      - ./logs.app/firebase-debug.log:/work/firebase-debug.log:delegated
      - ./logs.app/firestore-debug.log:/work/firestore-debug.log:delegated
      - ./logs.app/database-debug.log:/work/database-debug.log:delegated
      - ./logs.app/ui-debug.log:/work/ui-debug.log:delegated

    # Ports need to be exposed to the host for a) Desktop Cypress use case, b) debugging (UI port).
    ports:
      - "${FUNCTIONS_PORT}:${FUNCTIONS_PORT}"
      - "${FIRESTORE_PORT}:${FIRESTORE_PORT}"
      - "${DATABASE_PORT}:${DATABASE_PORT}"
      - "${AUTH_PORT}:${AUTH_PORT}"
      - "${UI_PORT}:${UI_PORT}"
    environment:
      - PROJECT_ID=demo-main
        # must match with what's in '../app/' (Makefile, docker-compose.tools.local.yml)

    healthcheck:
      test: '
        nc -z localhost ${FIRESTORE_PORT} && 
        nc -z localhost ${FUNCTIONS_PORT} && 
        nc -z localhost ${DATABASE_PORT} &&
        nc -z localhost ${AUTH_PORT}
        '
          # Note: 'nc' in that image doesn't handle checking multiple ports at once.
      interval: 1.0s
      start_period: 25s

  # Warm-up
  #
  # In addition to launching 'emul-for-app', its Callable interfaces need "priming" before they can be used, with
  # reliability (no 404's) and repeatable responsiveness (ms's, not seconds).
  #
  # Since the execution time is utterly fast (~0.2s) for an already warmed up service, we can simply run this every
  # time e.g. 'make test' is performed (instead of having an intermediate, stateful service that does the warm-up).
  #
  # Note: Likewise, we *could* have the warmup already in the 'emul-for-app' steps. That would work, too.
  #       If, however, we place it in the 'healthcheck' of that service, there won't be console output to help debug
  #       (also consider that the health check would take ~4s or more, which might - or not - be an issue).
  #
  emul-for-app-warmed-up:
    image: node:18-alpine
    volumes:
      # --- RO
      - ./dc/waky-waky:/work/waky-waky:ro
      - ./firebase.app.js:/work/firebase.app.js:ro

    working_dir: /work
    command: sh -c '
      echo "{ \"type\":\"module\" }" > package.json &&
      
      node waky-waky/index.js metricsAndLoggingProxy_v0
      '
    environment:
      - EMUL_HOST=emul-for-app
      - PROJECT_ID=demo-main
    depends_on:
      emul-for-app:
        condition: service_healthy
