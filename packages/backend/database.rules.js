/*
* database.rules.js
*
* Security Rules for Firebase Realtime Database access
*
* Note:
*   Doing these as '.js' allows for comments, and we can even craft a syntax highlighting TS-like module (tbd.) to help.
*   However, we currently lose watch mode: if you make changes to the rules, you need to restart the emulators. (tbd?)
*
* References:
*   -
*     -> https://medium.com/@juliomacr/10-firebase-realtime-database-rule-templates-d4894a118a98
*/

// Sample rules (from the net):
//
//    root.child('valid_colors/' + newData.val()).exists()
// Rules:
//    newData.isString()
//    newData.isNumber()
//
//    newData.val() > 99

const validate = s => ({ ".validate": s });

const validate_string = validate("newData.isString()")
const validate_number = validate("newData.isNumber()")
//const validate_list = validate("newData.isList()")

const rules = {
  ".read": false,             // no read access (without being admin) to any of the logs or counters
  ".write": "auth != null",   // only authenticated users may write

  // Note: "The unique key generated by 'push()' is based on a timestamp, so list items are automatically ordered
  //      chronologically." [1]
  //
  //  [1]: https://firebase.google.com/docs/database/web/lists-of-data#reading_and_writing_lists
  //
  // tbd. Save both client and server timestamps, for now (is there a way to extract a timestamp from the "push key"?)
  //    We don't necessarily need very detailed time stamping - enough to get it by a minute, or so (as long as the
  //    order is there, as guaranteed by Firebase).
  //
  "logging_v0": {
    "$pushKey": {
      "at": validate_number,    // client's time stamp
      "user": validate_string,
      "id": validate_string,
      "msg": validate_string,
      //"args": validate_list,    // or null
      //"context": "object"   // .browser etc. tbd.
    }
  }
}

export default {
  rules: rules
};
