#
# docker-compose.yml
#
# Launch emulators; provide a means to warm them up.
#
# Used by:
#   - manual development ('docker compose up -d' directly or via 'npm run up')
#   - CI
#     - with 'docker-compose.ci.yml' overrides
#
# Environment:
#   - CI_BUILDER_IMAGE (optional); name of the builder image.
#
# Intentions:
#   Within a Docker universe,
#     - launch Firebase Emulators using 'firebase.json'
#       - exposing ports for Firestore and Cloud Functions (Firebase Auth port not needed)
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: ${CI_BUILDER_IMAGE:-firebase-ci-builder:10.4.0-node16-npm8}
    ports:
      - "4000:4000"
      - "5002:5002"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      # --- RO
      - ./firebase.json:/work/firebase.json:ro
      # --- cached (may change; watched by the Emulators)
      - ./functions:/work/functions:cached
      - ./firestore.indexes.json:/work/firestore.indexes.json:cached
      - ./firestore.rules:/work/firestore.rules:cached
      # --- output
      - ./firebase-debug.log:/work/firebase-debug.log:delegated
      - ./firestore-debug.log:/work/firestore-debug.log:delegated
      - ./ui-debug.log:/work/ui-debug.log:delegated
      #
      - ./tmp/package.dc.json:/work/functions/package.json:ro

    working_dir: /work
    command: bash -o pipefail -c
      'echo "Launching Docker... üê≥" &&
      firebase emulators:start --project=demo-2
        | grep -v -E "You are not currently authenticated|Detected demo project ID|You are not signed in to the Firebase CLI"
      '
      # Keep project ID in sync with 'test-fns/setup.jest.js'
    environment:
      - CHOKIDAR_USEPOLLING=true
        # Without this, Firebase-tools (9.17.0) don't see changes (Security Rules, Cloud Functions)

    healthcheck:
      test: "nc -z localhost 6767 && nc -z localhost 5002 && echo 'healthy!'"
        # Note: 'nc' in that image doesn't handle checking multiple ports at once.
      interval: 0.7s
      start_period: 23s

  # WARM UP the engines
  #
  # Firebase Emulators are SLOW to wake. This part runs a minimal set of tests (the results of which are not used),
  # to wake up the necessary subsystems server-side. This results in more dependable test times in the actual tests.
  #
  warm-up:
    image: node:16-alpine
    volumes:
      # --- RO
      - ./node_modules:/work/node_modules:ro
      - ./jest.config.default.js:/work/jest.config.default.js:ro
      - ./firebase.json:/work/firebase.json:ro
      - ./package.json:/work/package.json:ro
      - ./test-fns:/work/test-fns:ro
      # HACK. during DEV, have 'file:~/Git/...' npm link resolve.
      - ${HOME}/Git/firebase-jest-testing/package:/firebase-jest-testing/package:ro

    working_dir: /work
    command: sh -o pipefail -c
      'npm config set update-notifier false &&
      npm run dc:warm-up &&
      touch .healthy &&
      sleep infinity
      '
      # Note: Returning from Jest (npm command) is taking ~30s on Windows+WSL2. Reason unknown. Be patient! #83
      #       tbd. test - is this still so?
    environment:
      - EMUL_HOST=emul
      - WARM_UP_TIMEOUT=30000
          # Seen cold start execution times ('docker compose down; docker up warm-up'):
          #
          # 14859, 22591 (macOS Intel, DC 4.6)
          #
          # ~~19000 (macOS, DC 4.0); normally ~3500 ms

    depends_on:
      emul:
        condition: service_healthy

    healthcheck:
      test: "[ -f .healthy ] && echo 'HEALTHY!'"
      interval: 0.7s
      start_period: 80s

    # Enable manual launch to debug 'emul' launch, only.
    #profiles: ['manual']

  # A pass-through target.
  #
  # Used via 'docker compose run --rm warmed-up'.
  #
  # A separate target, so that the warm-up log output is always visible only in Docker Desktop, not the terminal
  # output for something like 'npm test' (if launched with a cold DC).
  #
  warmed-up:
    image: node:16-alpine
    command: sh -c true
    depends_on:
      warm-up:
        condition: service_healthy
    profiles: ['manual']
