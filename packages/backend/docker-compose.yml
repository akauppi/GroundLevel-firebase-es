#
# docker-compose.yml
#
# For development (via 'npm' scripts) and as a basis for CI.
#
# Docker compose of:
#   - firebase-ci-builder   brings Firebase Emulators
#   - data and user priming
#
# Environment:
#   - CI_BUILDER_IMAGE (optional); name of the builder image.
#
# Intentions:
#   Within a Docker universe,
#     - launch Firebase Emulators using 'firebase.json' (UI could be disabled);
#       - exposing ports for Firestore and Firebase Auth (Cloud Functions emulated but not used from the front end)
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
version: '3.0'

services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: ${CI_BUILDER_IMAGE:-firebase-ci-builder:9.16.0-node16-npm7}
    ports:
      - "4000:4000"
      - "5002:5002"
      - "9100:9100"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      - .:/work
    working_dir: /work
    command: bash -o pipefail -c
      'echo "Launching Docker... üê≥" &&
      firebase emulators:start --project=demo-2
        | grep -v -E "Detected demo project ID|You are not signed in to the Firebase CLI|You are not currently authenticated"'
    # Keep project ID in sync with 'test-fns/setup.jest.js'

  # WARM UP the engines!!!
  #
  # Firebase Emulators are SLOW to wake. This part runs a minimal set of tests (the results of which are not used),
  # to wake up the necessary subsystems server-side. This results in more dependable test times in the actual tests.
  #
  # Once warmed up, 'socat' is used to open a TCP connection. Just the existence of this connection is enough to
  # signal to the tests that they can be started.
  #
  warm-up:
    build:
      context: ../../dc-tools/n-user/
      args:
        - NODE=${NODE:-16}
    ports:
      - "6768:6768"
    volumes:
      - .:/work
    working_dir: /work
    command: sh -o pipefail -c
      'wait-for-it emul:6767 --timeout=20 &&
      npm run ci:warm-up &&
      socat TCP-LISTEN:6768,fork TCP:emul:6767
      '
      #serve-port 6768
    environment:
      - EMUL_HOST=emul
      - WARM_UP_TIMEOUT=25000
          # seen timeouts with: 19000 (macOS, DC 4.0); normally ~3500 ms
    depends_on: ['emul']

  ci:
    build:
      context: ../../dc-tools/n-user/
      args:
        - NODE=${NODE:-16}
    volumes:
      - .:/work
    working_dir: /work
    command: bash -o pipefail -c
      'wait-for-it warm-up:6768 --timeout=30 &&
      npm run ci:test
      '
    environment:
      - EMUL_HOST=emul
      #- WARM_UP_TIMEOUT=19999
      #
    depends_on: ['emul', 'warm-up']
    profiles: ['manual']
