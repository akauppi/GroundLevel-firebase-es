#
# docker-compose.yml
#
# For development (via 'npm' scripts) and as a basis for CI.
#
# Docker compose of:
#   - firebase-ci-builder   brings Firebase Emulators
#   - data and user priming
#   - Vite                  front end Hot-Module Reloading; hosting
#
# Intentions:
#   Within a Docker universe,
#     - launch Firebase Emulators using 'firebase.json' (UI could be disabled);
#       - exposing ports for Firestore and Firebase Auth (Cloud Functions emulated but not used from the front end)
#     - launch Vite, hosting the front-end at localhost:3000
#     - Cypress use is locally (not within Docker) for development.
#
# Docker Compose NOTES:
#   - Docker Compose isolates different subpackages from each other by the '{folder}_{service}' naming; we can use
#     the same 'emul' both here and in backend without them becoming entangled.
#   - 'docker compose up' *will* keep the containers available, for a while, and reuse them. This means they might
#     come with state - or without - and our scripts must be tolerant of that!!!
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
version: '3.0'

services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: firebase-ci-builder:9.16.0-node16-npm7
    ports:
      - "4000:4000"
      - "9100:9100"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      - ..:/up
    working_dir: /up/app
    command: bash -o pipefail -c
      'echo "Launching Docker... 🐳" &&
      firebase emulators:start --project=${PROJECT_ID:-demo-abc}
        | grep -v -E "Detected demo project ID|You are not currently authenticated|You are not signed in"'

  # Vite provides the front-end hosting, with on-the-fly ES module resolving and Hot Module Reload. 🪄
  #
  # Implementation comments:
  #   - project root needs to be shared, so that '@firebase/...' can be imported
  #   - 'npm rebuild esbuild' or 'node node_modules/esbuild/install.js' is needed, since the npm dependencies ('esbuild')
  #     are installed in the host (could be macOS); to turn the binaries to Alpine Linux compatible ones. [1] IF YOU USE
  #     'vite' stand-alone (on Mac), need to run the same command, there as well (but we don't plan to; placing all bets
  #     on black).
  #   - timeout of 15s (for emulators to start up) has been known to be met (Firebase Emulators take some time to wake up),
  #     so adding some.
  #
  #   [1]: "Vite + Esbuild Docker issue" (Vite GitHub Issues) -> https://github.com/vitejs/vite/issues/2671
  #
  # Note:
  #   Docker Desktop for Windows (WSL2), docker 20.10.7, requires the 'user: "1000"' work-around, since this step
  #   needs to write files on the shared volume.
  #
  vite:
    build: ../../firebase-dc-tools/
    user: '1000'    # WSL2 quick fix
    ports:
      - "3000:3000"
    volumes:
      - ../..:/proj
    working_dir: /proj/packages/app
    command: bash -o pipefail -c
      'node node_modules/esbuild/install.js &&
      wait-for-it emul:4000 --timeout=20 &&
      firebase-prime --host=emul --project=${PROJECT_ID:-demo-abc} local/docs.js local/users.js &&
      npx vite --port 3000 --mode dev_local'
    depends_on: ['emul']

  # Initialize Firebase contents if Vite is run on host side
  #
  # TEMPORARY - REMOVE ONCE HOT MODULE RELOAD WORKS IN DOCKER COMPOSE, and we can only use Vite that way!
  #
  init-hmr-work-around:
    build: ../../firebase-dc-tools/
    user: '1000'    # WSL2 quick fix
    volumes:
      - ../..:/proj
    working_dir: /proj/packages/app
    command: bash -o pipefail -c
      'wait-for-it emul:4000 --timeout=20 &&
      firebase-prime --project=${PROJECT_ID:-demo-abc} local/docs.js local/users.js'
    depends_on: ['emul']
    profiles: ['manual']

  # DEBUG
  #
  # On macOS:         user | files owned by: user, mygroup | can write a file (and it shows as the macOS user's file, under host)
  # On Windows+WSL2:  user | -''-: node, node              | fails to write the file
  #
  # With 'user: root':
  #   - allows the code to run on Windows+WSL2, but any output files are created as 'root' in WSL2.
  #
  # With 'user: 1000' (WSL2 host user):
  #   - works on WSL2
  #   - works on macOS (the output file is that of the host user)
  #
  debug:
    build: ../../firebase-dc-tools/
    user: '1000'    # WSL2 user
    volumes:
      - ../..:/proj
    working_dir: /proj/packages/app
    command: bash -o pipefail -c
      'whoami && ls -al node_modules/esbuild && echo "some" > some.txt'
    profiles: ['manual']
