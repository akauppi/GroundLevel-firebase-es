#
# docker-compose.yml
#
# For development (via 'npm run dev:local') and as a basis for CI.
#
# Docker compose of:
#   - firebase-ci-builder   brings Firebase Emulators
#   - data and user priming
#   - Vite                  front end Hot-Module Reloading; hosting   <<-- if HMR works, under DC
#
# Environment variables:
#   CI_BUILDER_IMAGE (optional); name of the builder image
#
# Intentions:
#   Within a Docker universe,
#     - launch Firebase Emulators using 'firebase.json'
#       - exposing ports for Firestore and Firebase Auth (Cloud Functions are emulated but no callables used from the front end)
#
#   Cypress use is native (not within DC).
#
# Docker Compose NOTE:
#   - 'docker compose up' *will* keep the containers available, for a while, and reuse them. This means they might
#     come with state - or without - and our scripts must be tolerant of that!!!
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Cypress > Continuous Integration > Introduction
#     -> https://docs.cypress.io/guides/continuous-integration/introduction#What-is-Continuous-Integration
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
version: '3.0'

services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: ${CI_BUILDER_IMAGE:-firebase-ci-builder:9.17.0-node16-npm7}
    ports:
      - "4000:4000"
      - "9100:9100"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      - ..:/up:ro
      #--- output
      - ./firebase-debug.log:/up/app/firebase-debug.log:delegated
      - ./firestore-debug.log:/up/app/firestore-debug.log:delegated
      - ./ui-debug.log:/up/app/ui-debug.log:delegated

    working_dir: /up/app
    command: bash -o pipefail -c
      'echo "Launching Docker... üê≥" &&
      firebase emulators:start --project=${PROJECT_ID:-demo-abc}
        | grep -v -E "Detected demo project ID|You are not signed in to the Firebase CLI|You are not currently authenticated"'

  # Emulators are up, and primed with the users / data.
  #
  # ! Only for DEV. Only when Vite is run natively (not via DC).
  #
  primed-dev:
    build:
      context: ../../dc-tools/firebase-prime/
      args:
        - NODE=${NODE_V:-16}
    volumes:
      - .:/work:ro
    working_dir: /work
    command: bash -o pipefail -c
      'wait-for-it emul:6767 --timeout=15 &&
      wait-for-it emul:9100 --timeout=10 &&
      firebase-prime --host=emul --project=${PROJECT_ID:-demo-abc} local/docs.js local/users.js
      '
    depends_on: ['emul']
    profiles: ['manual']

  # EXPERIMENTAL!!
  #
  # Usage:
  #   <<
  #   $ docker compose run primed-dev     # waits until the database is ready
  #   $ docker compose up vite-exp
  #   <<
  #
  # NOTE:
  #   If you use this, you MUST run when changing between Linux (DC) <-> macOS:
  #     <<
  #       $ node node_modules/esbuild/install.js      # or 'npm install --no-save esbuild'
  #     <<
  #
  #   'esbuild' install is machine type dependent. With above command, you align it to the appropriate
  #   type (cannot have both installed, at once).
  #
  vite-exp:
    image: node:16-alpine
    #user: '1000'    # WSL2 quick fix
    ports:
      - "3000:3000"
    volumes:
      #--- RO
      # eslint and Firebase client come from the top
      - ../../node_modules:/proj/node_modules:ro
      - ./package.json:/proj/packages/app/package.json:ro
      - ./.env.dev_local:/proj/packages/app/.env.dev_local:ro
      - ./.npmrc:/proj/packages/app/.npmrc:ro
      #- ./node_modules:/proj/packages/app/node_modules:ro
      #--- cached
      - ./public:/proj/packages/app/public:cached
      - ./src:/proj/packages/app/src:cached
      - ./vitebox:/proj/packages/app/vitebox:cached
      - ./vite.config.js:/proj/packages/app/vite.config.js:cached   # tbd. are changes to it detected, or a restart needed?
      #--- output
      #- ./node_modules/esbuild.dc:/proj/packages/app/node_modules/esbuild:delegated
        # did not work - allowing container to modify 'node_modules/esbuild' contents (for now???)
      - ./node_modules:/proj/packages/app/node_modules:rw
      #--- misc
      - ./tools:/proj/packages/app/tools:cached
        # needs write access since npm tries to change '+x' (unnecessarily)
    working_dir: /proj/packages/app
    entrypoint: npm
    command: ['run', 'dc:launch']
    #depends_on: []
    profiles: ['exp']

  # Make sure Vite and emulators are launched.
  #
  # No priming. Suitable for 'npm test'.
  #
  vite-launched:
    build:
      context: ../../dc-tools/n-user/
      args:
        - NODE=${NODE_V:-16}
    command: bash -o pipefail -c
      'wait-for-it emul:6767 --timeout=15 &&
      wait-for-it emul:9100 --timeout=10 &&
      wait-for-it vite-exp:3000 --timeout=10
      '
    depends_on: ['emul', 'vite-exp']
    profiles: ['manual-exp', 'exp']

  # A version suitable for launching also Vite, under DC.
  #
  # DO NOT USE THIS for real, because of lack of Hot Module Reload!
  #
  # Usage:
  #   <<
  #     $ docker compose run --rm vite-launched-exp
  #   <<
  #
  vite-primed-exp:
    build:
      context: ../../dc-tools/firebase-prime/
      args:
        - NODE=${NODE_V:-16}
    volumes:
      - .:/work:ro
    working_dir: /work
    command: bash -o pipefail -c
      'wait-for-it emul:6767 --timeout=15 &&
      wait-for-it emul:9100 --timeout=10 &&
      firebase-prime --host=emul --project=${PROJECT_ID:-demo-abc} local/docs.js local/users.js &&
      wait-for-it vite-exp:3000 --timeout=10
      '
    depends_on: ['emul', 'vite-exp']
    profiles: ['manual-exp', 'exp']
