#
# app/docker-compose.yml
#
# For development (via 'npm run dev:local') and as a basis for CI.
#
# Docker compose of:
#   - Vite      front end Hot-Module Reloading; hosting
#
# Intentions:
#   Host and hot-module-reload the front end.
#
#   Cypress use is native (not within DC).
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Cypress > Continuous Integration > Introduction
#     -> https://docs.cypress.io/guides/continuous-integration/introduction#What-is-Continuous-Integration
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
services:
  vite-local:
    image: node:16-alpine
    ports:
      - "3000:3000"
    volumes:
      # --- RO
      - ../../node_modules:/proj/node_modules:ro                  # eslint comes from the top
      - ./package.json:/proj/packages/app/package.json:ro
      - ./node_modules:/proj/packages/app/node_modules:ro         # note: should not have 'esbuild' in it
      - ./vite.config.js:/proj/packages/app/vite.config.js:ro     # Vite needs a restart to see config changes, thus 'ro'.
      - ../backend/firebase.app.json:/proj/packages/app/firebase.json:ro
      - ./tools/gen-vite-env-local.js:/proj/packages/app/tools/gen-vite-env-local.js:ro
      # --- cached
      - ./public:/proj/packages/app/public:cached
      - ./src:/proj/packages/app/src:cached
      - ./vitebox:/proj/packages/app/vitebox:cached
      # --- other
      - ./tmp/node_modules.linux:/proj/packages/node_modules:delegated   # see 'APPROACH.md'
      # HACK. during DEV, have 'file:/~/Git/...' npm link resolve.
      #- ${HOME}/Git/aside-keys/package:/proj/packages/app/node_modules/aside-keys:ro

    working_dir: /proj/packages/app
    command: sh -c
      'npm config set update-notifier false &&
      [ ! -d node_modules/esbuild ] || (echo >&2 ERROR:\ please remove 'node_modules/esbuild*'; false) &&

      npm install --prefix .. --no-save esbuild &&
      npm run dc:launch:local
      '
    environment:
      - SENTRY_DNS

    healthcheck:
      test: "nc -z localhost 3000"
      interval: 0.9s
      start_period: 25s

  # Make sure Vite is launched. Used by 'npm test'.
  #
  vite-local-launched:
    image: node:16-alpine
    command: sh -c true
    depends_on:
      vite-local:
        condition: service_healthy
    profiles: ['manual']

  # Separate target; priming with 'local/{docs|users}.js'
  #
  # NOTE:
  #   How reliable is use of 'host.docker.internal' (works on macOS; Docker 4.7.1)
  #
  # References:
  #   "How to access host port from docker container" (SO)
  #     -> https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container
  #
  # Note:
  #   'host.docker.interenal' likely provides access to _all_ the host ports. It's not ideal, but if it works for us,
  #   good.
  #
  prime:
    build:
      context: tools/prime.dc
    volumes:
      # --- RO
      - ./local:/work/data:ro
      - ../backend/firebase.app.json:/work/firebase.json:ro
    environment:
      - FIRESTORE_PORT=6768
      - AUTH_PORT=9101
      - PROJECT=demo-main
    command:
      npx firebase-prime --host host.docker.internal --project demo-main data/docs.js data/users.js

    profiles: ['manual']
