#
# docker-compose.ci.yml
#
# Tools for CI test runs (Cloud Build).
#
# _Similar_ to 'dc.base.yml' and 'docker-compose.local.yml' but separate. Changes here will not break development
# experience, and vice versa. However, we still use the same Vite version, defined under 'tools/vite.dc/'.
#
# Also Cypress tests are within this same file.
#
# Expects:
#   - PORT to declare the port to show UI in
#   - CYPRESS_IMAGE if using 'cypress'
#
# References:
#   - Share Compose configurations between files and projects (Docker Compose docs)
#     -> https://docs.docker.com/compose/extends/
#
services:
  # Also builds are done with this; CI does not need visualizations
  vite-ci:
    build:
      context: tools/vite.dc
      target: vite_plain
    volumes:
      # --- RO
      - ./node_modules:/work/node_modules:ro
      - ./public:/work/public:ro
      - ./src:/work/src:ro
      - ./dev:/work/dev:ro
      - ./package.json:/work/package.json:ro              # 'ci:launch' is there
      - ./tmp/.env.ci_test:/work/.env:ro
      #
      - ./vite.config.js:/work/vite.config.js:ro
      - ./rollup.chunks.js:/work/rollup.chunks.js:ro
      - ../../branding/favicon.png:/branding/favicon.png:ro   # trick to make the 'ln -s' work

    working_dir: /work
    command: sh -c '
      vite --mode dev_local
      '
    environment:
      - PORT=$VITE_PORT    # at least 'vite.config.js' wants it

    network_mode: cloudbuild
    container_name: vite
      # The domain node name (not 'localhost'!) to use for the front end, e.g. 'http://vite:3002'

    healthcheck:
      test: "nc -z localhost ${VITE_PORT}"
      interval: 0.9s
      start_period: 20s

  # Semi-debug step.
  #
  # This can be used from the Cloud Build definition, to check 'vite-ci' is actually up and healthy (before proceeding
  # to time-taking 'cypress/included' download.
  #
  # Note: Not only wakes 'vite' but also checks we have network level access to it.
  #
  vite-ci-launched:
    image: node:18-alpine
    command: sh -c '
      nc -z vite $VITE_PORT
      '
    network_mode: cloudbuild
    depends_on:
      vite-ci:
        condition: service_healthy

    container_name: vite-ci-launched    # just for the logs
    profiles: ['manual']

  # Cypress run
  #
  # Note: Two alternatives. You can either use pre-built image (A) or what the repo has right now (B).
  #
  cypress:
    # A: 'cypress-custom' image has been pre-built
    image: ${CYPRESS_IMAGE:-}

    # B: use from repo; rebuilds every time (around 4 mins)
    #build:
    #  context: tools/cypress.dc
    #  target: cypress-custom

    volumes:
      # --- RO
      - ./cypress:/work/cypress:ro
      - ./cypress.config.js:/work/cypress.config.js:ro
      - ./package.json:/work/package.json:ro
      - ./node_modules:/work/node_modules:ro
      #
      - ./tmp/firebase.ci.js:/work/firebase.ci.js
      # --- output
      - ./.screenshots:/work/.screenshots:delegated
    environment:
      - CYPRESS_defaultCommandTimeout=20000
      - CYPRESS_baseUrl=http://vite:${VITE_PORT}
      - CYPRESS_CI=tru
      - EMUL_HOST=emul-for-app
      - FIREBASE_APP_JS=firebase.ci.js
    working_dir: /work
    entrypoint: []    # clear the 'entrypoint' of the stock image ('["cypress", "run"]')
    command: sh -c '
        cypress run
      ']
    profiles: ['manual']

    # allows Cypress to see 'vite' and 'emul-for-app' hosts
    network_mode: cloudbuild
    container_name: cypress   # for console output, only

    depends_on:
      vite-ci:
        condition: service_healthy

    #
    # Test durations:
    #   1: 9253, 7429 ms
    #   2:
    #   3:
    #
    # Tests durations (old):
    #   1: 10673, 9478, 9270, 10987 ms
    #   2: na
    #   3:  4224, 4920, 4695,  5276 ms

  #---
  # DEBUG; TERMINAL
  #
  # Prove we can see 'vite' and 'emul-for-app', from within DC.
  see-them:
    image: node:18-alpine
    command: sh -c '
      apk add --update curl &&
      echo "THIS IS DEBUG OUTPUT:" &&
      
      nc -z vite 3002 && echo "I see Vite" &&
      nc -z emul-for-app 6868 && echo "I see Realtime Database" &&

      curl -Iv http://vite:3002 &&      
      (curl -Iv http://vite:3002/@fs/work/src/app.js > /dev/null) &&
      echo "--- SAW EVERYTHING ---" && false
      '
      # The '/@fs/work/src/app.js' link is what will be needed by Cypress, later.
    network_mode: cloudbuild
    profiles: ['manual']
      # No 'depends_on:' on purpose: this is a debugging stage

# tbd. If we had a way to provide YAML-level substitutions, 'VITE_PORT' could be handled that way. Its only used internally.
